{
    "projects": [
        {
            "name": "Glowpucks",
            "description": "The GlowPucks project was originally made for the EE 426: Microprocessor Applications class and now is being developed as a independent project. The purpose of the project is to create a replacement device that can temporarily replace conventional street refelectors for interfacing with drivers. The GlowPuck can interface drivers through different lightmodes and work along side other GlowPuck devices. The project features a technology stack from the embedded device to a frontend user interface. Different communication protocols such as MQTT and REST API that are used through differnt parts of the data pipeline along with different languages to power the technology stack.",
            "repository_link": "https://github.com/araamz/GlowPucks",
            "repository_name": "GlowPucks",
            "tags": [
                "API Development",
                "React",
                "Embedded",
                "MQTT",
                "Flask",
                "Python",
                "Arduino UNO",
                "Espressif ESP32-C3",
                "Routing",
                "C"
            ]
        },
        {
            "name": "Stipes",
            "description": "Stipes is a basic task logger application made to mock User Stories and Tasks related to user-generated user stories. Stipes was created as an independent project to get familiar with React and React Router for frontend development. The project features a basic technology stack being a SQLite database used by a Flask backend and React-based frontend. Stipes is not in active development.",
            "repository_link": "https://github.com/araamz/Stipes",
            "repository_name": "Stipes",
            "tags": [
                "React",
                "Flask",
                "Routing",
                "API Development",
                "JavaScript",
                "Python"
            ]
        },
        {
            "name": "Cookie Clicker",
            "description": "Cookie Clicker is a recreation of the popular game \"Cookie Clicker\" popularized in 2013 to demonstrate the use of the Model-View-Controller Pattern with JavaScript. Cookie Clicker was originally made for the CS 330: Design Patterns class and now is not in active development. The project technology stack features a vanilla JavaScript frontend with a Django backend made to store user high scores and name in a SQLite database. The game is simply clicking a moving cookie untill the previous high score is surpassed in which the user can submit the new score which then is saved into the database with their name.",
            "repository_link": "https://github.com/araamz/Cookie-Clicker",
            "repository_name": "Cookie-Clicker",
            "tags": [
                "MVC",
                "Django",
                "API Development",
                "JavaScript",
                "Python"

            ]
        },
        {
            "name": "Java Color Picker",
            "description": "Java Color Picker is an application originally created for the CS 326: Programming Languages course that features a color picker user interface created in Swing under the Model-View-Controller (MVC) Pattern. Java Color Picker is capable of file system write and read to save changed color palettes in which the user can also default to the standard color palette.",
            "repository_link": "https://github.com/araamz/Java-Color-Picker",
            "repository_name": "Java-Color-Picker",
            "tags": [
                "Java",
                "Swing",
                "MVC"
            ]
        },
        {
            "name": "Toy Database",
            "description": "Toy Database is an application originally created for the CS 456: Databases course that features a very basic database that mimics the SQLite database. The application features a layered approach in which encapsulates file system file access for read and write operations in one layer with the other layer being used for encapsulating functionality related to the SQL parser. There is no graphical user interface in the application except a CLI to interact with the database. The database can also be used with a file containing SQL statements as an argument when running the application.",
            "repository_link": "https://github.com/araamz/Toy-Database",
            "repository_name": "Toy-Database",
            "tags": [
                "Java",
                "Parsing"
            ]
        }
    ]
}